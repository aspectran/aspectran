/*
 * Copyright (c) 2008-present The Aspectran Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.aspectran.utils.security;

import com.aspectran.utils.PBEncryptionUtils;
import com.aspectran.utils.StringUtils;
import com.aspectran.utils.annotation.jsr305.Nullable;
import com.aspectran.utils.apon.AponReader;
import com.aspectran.utils.apon.Parameters;

/**
 * A simple password-based token issuer.
 * <p>This class creates and parses tokens by encrypting the string representation
 * of a {@link Parameters} object. It uses the encryption settings configured in
 * {@link PBEncryptionUtils}. Unlike {@link TimeLimitedPBTokenIssuer}, tokens
 * generated by this class do not have an expiration time.</p>
 */
public class PBTokenIssuer {

    private static final PBTokenIssuer instance = new PBTokenIssuer();

    /**
     * Creates a new token by encrypting the given payload.
     * @param payload the parameters to be included in the token (must not be null)
     * @return the encrypted token string
     * @throws IllegalArgumentException if the payload is null
     */
    public String createToken(Parameters payload) {
        if (payload == null) {
            throw new IllegalArgumentException("payload must not be null");
        }
        return PBEncryptionUtils.encrypt(payload.toString());
    }

    /**
     * Parses the specified token and extracts the payload as {@link com.aspectran.utils.apon.VariableParameters}.
     * @param token the token string to parse
     * @param <T> the type of the payload
     * @return the payload as a {@link com.aspectran.utils.apon.VariableParameters} instance
     * @throws InvalidPBTokenException if the token is invalid or malformed
     */
    public <T extends Parameters> T parseToken(String token) throws InvalidPBTokenException {
        return parseToken(token, null);
    }

    /**
     * Parses the specified token and extracts the payload into a new instance of the given type.
     * @param token the token string to parse
     * @param payloadType the class of the payload, a subclass of {@link Parameters}
     * @param <T> the type of the payload
     * @return a new instance of the specified payload type
     * @throws InvalidPBTokenException if the token is invalid or malformed
     * @throws IllegalArgumentException if the token is null or empty
     */
    @SuppressWarnings("unchecked")
    public <T extends Parameters> T parseToken(String token, @Nullable Class<T> payloadType)
            throws InvalidPBTokenException {
        if (StringUtils.isEmpty(token)) {
            throw new IllegalArgumentException("token must not be null or empty");
        }
        try {
            String payload = PBEncryptionUtils.decrypt(token);
            if (payloadType != null) {
                return AponReader.read(payload, payloadType);
            } else {
                return (T)AponReader.read(payload);
            }
        } catch (Exception e) {
            throw new InvalidPBTokenException(token, e);
        }
    }

    /**
     * A static helper method to get a new token with the given payload.
     * @param payload the parameters to be included in the token
     * @return the encrypted token string
     */
    public static String getToken(Parameters payload) {
        return instance.createToken(payload);
    }

    /**
     * A static helper method to parse a token and get its payload.
     * @param token the token string to parse
     * @param <T> the type of the payload
     * @return the payload as a {@link com.aspectran.utils.apon.VariableParameters} instance
     * @throws InvalidPBTokenException if the token is invalid or malformed
     */
    public static <T extends Parameters> T getPayload(String token)
            throws InvalidPBTokenException {
        return getPayload(token, null);
    }

    /**
     * A static helper method to parse a token and get its payload as the specified type.
     * @param token the token string to parse
     * @param payloadType the class of the payload, a subclass of {@link Parameters}
     * @param <T> the type of the payload
     * @return a new instance of the specified payload type
     * @throws InvalidPBTokenException if the token is invalid or malformed
     */
    public static <T extends Parameters> T getPayload(String token, Class<T> payloadType)
            throws InvalidPBTokenException {
        return instance.parseToken(token, payloadType);
    }

}
