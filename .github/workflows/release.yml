#
# Release workflow
#
# Secrets:
# - GPG_SIGNING_KEY (private key with armor)
# - GPG_PASSPHRASE (the private key passphrase)
# - CENTRAL_USERNAME (token user generated by central.sonatype.org)
# - CENTRAL_PASSWORD (token password generated by central.sonatype.org)
#

name: Manual Maven Release

on:
  push:
    tags:
      - 'v[0-9]*.[0-9]*.[0-9]*'

jobs:
  release:
    name: Release to Maven Central
    runs-on: ubuntu-latest
    environment: sonatype
    if: github.ref_type == 'tag'
    steps:

      - name: Checkout ${{ github.ref_name }}
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Verify tag and extract version
        id: version
        run: |
          git fetch --tags --force
          full_tag=${GITHUB_REF#refs/tags/}
          echo "Tag: $full_tag"
          echo "tag_name=$full_tag" >> $GITHUB_OUTPUT
          
          semver=${full_tag#v}
          echo "Semantic Version: $semver"
          echo "version=$semver" >> $GITHUB_OUTPUT

      - name: Setup Java
        uses: actions/setup-java@v5
        with:
          distribution: temurin
          java-version: 11
          cache: maven

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Release
        env:
          CENTRAL_USERNAME: ${{ secrets.CENTRAL_USERNAME }}
          CENTRAL_PASSWORD: ${{ secrets.CENTRAL_PASSWORD }}
        run: |
          ./mvnw -B deploy -P release -s .mvn/settings.xml

      - name: Post release
        env:
          GH_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          gh extension install valeriobelli/gh-milestone
          
          version=${{ steps.version.outputs.version }}    # The semantic version, e.g., "1.0.0"
          tag_name=${{ steps.version.outputs.tag_name }}  # The full tag, e.g., "v1.0.0"

          echo "Trying to find milestone $version"
          milestone=$(gh milestone list --json id,title,state  --jq "map_values(select(.title == \"${version}\" and .state == \"OPEN\")).[].number")
          if [ ! -z "$milestone" ]; then
              echo "Found milestone $version, closing it"
              gh milestone edit $milestone --state closed 
          fi

          # Parse semantic version and increment patch version
          if [[ $version =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            major=${BASH_REMATCH[1]}
            minor=${BASH_REMATCH[2]}
            patch=${BASH_REMATCH[3]}
  
            # Increment patch version for next development cycle
            next_patch=$((patch + 1))
            next_version="${major}.${minor}.${next_patch}"
  
            echo "Preparing development $next_version"
            echo "Trying to find milestone $next_version"
  
            milestone=$(gh milestone list --json id,title,state --jq "map_values(select(.title == \"${next_version}\" and .state == \"OPEN\")).[].number")
            if [ -z "$milestone" ]; then
              echo "Creating milestone $next_version"
              gh milestone create --title $next_version
            fi
          else
            echo "ERROR: Version $version from tag $tag_name is not a valid semantic version (x.y.z)"
            exit 1
          fi          
          
          repo_name=${GITHUB_REPOSITORY#*/}
          release_title="${repo_name}-${version}"
          echo "Creating release \"$release_title\" from tag $tag_name"
          gh release create $tag_name --verify-tag --notes-from-tag --title "$release_title"
